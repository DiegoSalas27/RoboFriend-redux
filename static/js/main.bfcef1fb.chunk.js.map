{"version":3,"sources":["../../robofriends-redux/src/components/Card.js","../../robofriends-redux/src/components/CardList.js","../../robofriends-redux/src/components/SearchBox.js","../../robofriends-redux/src/components/Scroll.js","../../robofriends-redux/src/components/ErrorBoundry.js","../../robofriends-redux/src/components/CounterButton.js","../../robofriends-redux/src/components/Header.js","../../robofriends-redux/src/containers/App.js","../../robofriends-redux/src/actions.js","../../robofriends-redux/src/constants.js","../../robofriends-redux/src/reducers.js","../../robofriends-redux/src/serviceWorker.js","../../robofriends-redux/src/index.js"],"names":["Card","_ref","id","email","name","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","cardArray","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","nextProps","nextState","components_CounterButton","App","OnRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfcef1fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, email, name}) => { //we recieve the props and destructure them inside the parameters\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => { //pure function or pure components\r\n    console.log('CardList')\r\n    const cardArray = robots.map((user, i) => {\r\n        // if(true){\r\n        //     throw new Error('NO');\r\n        // }\r\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>;\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    console.log('SearchBox')\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) { //same as try catch block\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ops. There is an error my niggu!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\r\n\r\n//PureComponent is another way to avoid the class component to rerender\r\nclass CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     if (this.state.count !== nextState.count) {\r\n    //         return true;\r\n    //     } \r\n    //     return false;\r\n    // }\r\n    \r\n    //state updates are not synchronous, so if you are going to update the state of a component\r\n    //from it's previous state value, it's recommended to return it this way\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.OnRequestRobots()\n  }\n\n  // onSearchChange = (event) => { //this arrow function makes sures that \"this\" is refered to the app class and not the input from the \n  // //searchbox\n  //   this.setState({ searchfield: event.target.value});\n  // }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? \n      <h1>Loading...</h1> :\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => { //it sends the actions to the reducers\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    OnRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //subscribe to any state changes in the redux store","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => { //function the returns a function\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n    \r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, { searchField: action.payload }); //return a new state with whatever the user has entered\r\n            // return { ...state, searchField: action.apyload}\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false }\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'; //it is a middleware\nimport thunkMiddleware from 'redux-thunk';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; //if there is no extension it assumes is javascript\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}